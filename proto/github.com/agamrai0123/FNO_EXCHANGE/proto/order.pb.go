// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.1
// source: order.proto

package proto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Order struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SessionId            uint32                 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ExchangeCode         string                 `protobuf:"bytes,2,opt,name=exchange_code,json=exchangeCode,proto3" json:"exchange_code,omitempty"`
	EbaMatchAccount      string                 `protobuf:"bytes,3,opt,name=eba_match_account,json=ebaMatchAccount,proto3" json:"eba_match_account,omitempty"`
	UserId               string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Channel              string                 `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	CseId                string                 `protobuf:"bytes,6,opt,name=cse_id,json=cseId,proto3" json:"cse_id,omitempty"`
	PipeId               string                 `protobuf:"bytes,7,opt,name=pipe_id,json=pipeId,proto3" json:"pipe_id,omitempty"`
	CtclId               string                 `protobuf:"bytes,8,opt,name=ctcl_id,json=ctclId,proto3" json:"ctcl_id,omitempty"`
	ProductType          string                 `protobuf:"bytes,9,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`
	Underlying           string                 `protobuf:"bytes,10,opt,name=underlying,proto3" json:"underlying,omitempty"`
	ExpiryDate           string                 `protobuf:"bytes,11,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	ExcerciseType        string                 `protobuf:"bytes,12,opt,name=excercise_type,json=excerciseType,proto3" json:"excercise_type,omitempty"`
	OptionType           string                 `protobuf:"bytes,13,opt,name=option_type,json=optionType,proto3" json:"option_type,omitempty"`
	StrikePrice          uint32                 `protobuf:"varint,14,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`
	IndexOrStock         string                 `protobuf:"bytes,15,opt,name=index_or_stock,json=indexOrStock,proto3" json:"index_or_stock,omitempty"`
	CaLevel              string                 `protobuf:"bytes,16,opt,name=ca_level,json=caLevel,proto3" json:"ca_level,omitempty"`
	ActionId             string                 `protobuf:"bytes,17,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	BalanceAmount        float32                `protobuf:"fixed32,18,opt,name=balance_amount,json=balanceAmount,proto3" json:"balance_amount,omitempty"`
	CanModifyFlag        string                 `protobuf:"bytes,19,opt,name=can_modify_flag,json=canModifyFlag,proto3" json:"can_modify_flag,omitempty"`
	NkdBlockedFlag       string                 `protobuf:"bytes,20,opt,name=nkd_blocked_flag,json=nkdBlockedFlag,proto3" json:"nkd_blocked_flag,omitempty"`
	ModifyTradeDate      string                 `protobuf:"bytes,21,opt,name=modify_trade_date,json=modifyTradeDate,proto3" json:"modify_trade_date,omitempty"`
	ModifyTradeTime      string                 `protobuf:"bytes,22,opt,name=modify_trade_time,json=modifyTradeTime,proto3" json:"modify_trade_time,omitempty"`
	SlmFlag              string                 `protobuf:"bytes,23,opt,name=slm_flag,json=slmFlag,proto3" json:"slm_flag,omitempty"`
	DisclosedQuantity    uint32                 `protobuf:"varint,24,opt,name=disclosed_quantity,json=disclosedQuantity,proto3" json:"disclosed_quantity,omitempty"`
	TotalOrderQuantity   uint32                 `protobuf:"varint,25,opt,name=total_order_quantity,json=totalOrderQuantity,proto3" json:"total_order_quantity,omitempty"`
	LimitRate            uint32                 `protobuf:"varint,26,opt,name=limit_rate,json=limitRate,proto3" json:"limit_rate,omitempty"`
	StopLossTrigger      uint32                 `protobuf:"varint,27,opt,name=stop_loss_trigger,json=stopLossTrigger,proto3" json:"stop_loss_trigger,omitempty"`
	OrderValidDate       string                 `protobuf:"bytes,28,opt,name=order_valid_date,json=orderValidDate,proto3" json:"order_valid_date,omitempty"`
	OrderType            string                 `protobuf:"bytes,29,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	AckTime              string                 `protobuf:"bytes,30,opt,name=ack_time,json=ackTime,proto3" json:"ack_time,omitempty"`
	SpecialFlag          string                 `protobuf:"bytes,31,opt,name=special_flag,json=specialFlag,proto3" json:"special_flag,omitempty"`
	OrderFlow            string                 `protobuf:"bytes,32,opt,name=order_flow,json=orderFlow,proto3" json:"order_flow,omitempty"`
	SpreadOrderIndicator string                 `protobuf:"bytes,33,opt,name=spread_order_indicator,json=spreadOrderIndicator,proto3" json:"spread_order_indicator,omitempty"`
	Remarks              string                 `protobuf:"bytes,34,opt,name=remarks,proto3" json:"remarks,omitempty"`
	UserFlag             string                 `protobuf:"bytes,35,opt,name=user_flag,json=userFlag,proto3" json:"user_flag,omitempty"`
	ExchangeRemarks      string                 `protobuf:"bytes,36,opt,name=exchange_remarks,json=exchangeRemarks,proto3" json:"exchange_remarks,omitempty"`
	IndexCode            string                 `protobuf:"bytes,37,opt,name=index_code,json=indexCode,proto3" json:"index_code,omitempty"`
	SltpTrailFlag        string                 `protobuf:"bytes,38,opt,name=sltp_trail_flag,json=sltpTrailFlag,proto3" json:"sltp_trail_flag,omitempty"`
	VendorId             string                 `protobuf:"bytes,39,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	VendorNumber         string                 `protobuf:"bytes,40,opt,name=vendor_number,json=vendorNumber,proto3" json:"vendor_number,omitempty"`
	OneClickFlag         string                 `protobuf:"bytes,41,opt,name=one_click_flag,json=oneClickFlag,proto3" json:"one_click_flag,omitempty"`
	OneClickPortfolioId  string                 `protobuf:"bytes,42,opt,name=one_click_portfolio_id,json=oneClickPortfolioId,proto3" json:"one_click_portfolio_id,omitempty"`
	AlgoId               string                 `protobuf:"bytes,43,opt,name=algo_id,json=algoId,proto3" json:"algo_id,omitempty"`
	AlgoOrderRemarks     string                 `protobuf:"bytes,44,opt,name=algo_order_remarks,json=algoOrderRemarks,proto3" json:"algo_order_remarks,omitempty"`
	SourceFlag           string                 `protobuf:"bytes,45,opt,name=source_flag,json=sourceFlag,proto3" json:"source_flag,omitempty"`
	PopupFlag            string                 `protobuf:"bytes,46,opt,name=popup_flag,json=popupFlag,proto3" json:"popup_flag,omitempty"`
	ExpiryDate2          string                 `protobuf:"bytes,47,opt,name=expiry_date2,json=expiryDate2,proto3" json:"expiry_date2,omitempty"`
	IpAddress            string                 `protobuf:"bytes,48,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	CallSource           string                 `protobuf:"bytes,49,opt,name=call_source,json=callSource,proto3" json:"call_source,omitempty"`
	FreshOrderRef        string                 `protobuf:"bytes,50,opt,name=fresh_order_ref,json=freshOrderRef,proto3" json:"fresh_order_ref,omitempty"`
	Alias                string                 `protobuf:"bytes,51,opt,name=alias,proto3" json:"alias,omitempty"`
	SystemMessage        string                 `protobuf:"bytes,52,opt,name=system_message,json=systemMessage,proto3" json:"system_message,omitempty"`
	RequestType          string                 `protobuf:"bytes,53,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	UserPassword         string                 `protobuf:"bytes,54,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	DeliveryEosFlag      string                 `protobuf:"bytes,55,opt,name=delivery_eos_flag,json=deliveryEosFlag,proto3" json:"delivery_eos_flag,omitempty"`
	OrderReference       string                 `protobuf:"bytes,56,opt,name=order_reference,json=orderReference,proto3" json:"order_reference,omitempty"`
	CoverOrderRef        string                 `protobuf:"bytes,57,opt,name=cover_order_ref,json=coverOrderRef,proto3" json:"cover_order_ref,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_order_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Order) GetExchangeCode() string {
	if x != nil {
		return x.ExchangeCode
	}
	return ""
}

func (x *Order) GetEbaMatchAccount() string {
	if x != nil {
		return x.EbaMatchAccount
	}
	return ""
}

func (x *Order) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Order) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Order) GetCseId() string {
	if x != nil {
		return x.CseId
	}
	return ""
}

func (x *Order) GetPipeId() string {
	if x != nil {
		return x.PipeId
	}
	return ""
}

func (x *Order) GetCtclId() string {
	if x != nil {
		return x.CtclId
	}
	return ""
}

func (x *Order) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *Order) GetUnderlying() string {
	if x != nil {
		return x.Underlying
	}
	return ""
}

func (x *Order) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *Order) GetExcerciseType() string {
	if x != nil {
		return x.ExcerciseType
	}
	return ""
}

func (x *Order) GetOptionType() string {
	if x != nil {
		return x.OptionType
	}
	return ""
}

func (x *Order) GetStrikePrice() uint32 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *Order) GetIndexOrStock() string {
	if x != nil {
		return x.IndexOrStock
	}
	return ""
}

func (x *Order) GetCaLevel() string {
	if x != nil {
		return x.CaLevel
	}
	return ""
}

func (x *Order) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *Order) GetBalanceAmount() float32 {
	if x != nil {
		return x.BalanceAmount
	}
	return 0
}

func (x *Order) GetCanModifyFlag() string {
	if x != nil {
		return x.CanModifyFlag
	}
	return ""
}

func (x *Order) GetNkdBlockedFlag() string {
	if x != nil {
		return x.NkdBlockedFlag
	}
	return ""
}

func (x *Order) GetModifyTradeDate() string {
	if x != nil {
		return x.ModifyTradeDate
	}
	return ""
}

func (x *Order) GetModifyTradeTime() string {
	if x != nil {
		return x.ModifyTradeTime
	}
	return ""
}

func (x *Order) GetSlmFlag() string {
	if x != nil {
		return x.SlmFlag
	}
	return ""
}

func (x *Order) GetDisclosedQuantity() uint32 {
	if x != nil {
		return x.DisclosedQuantity
	}
	return 0
}

func (x *Order) GetTotalOrderQuantity() uint32 {
	if x != nil {
		return x.TotalOrderQuantity
	}
	return 0
}

func (x *Order) GetLimitRate() uint32 {
	if x != nil {
		return x.LimitRate
	}
	return 0
}

func (x *Order) GetStopLossTrigger() uint32 {
	if x != nil {
		return x.StopLossTrigger
	}
	return 0
}

func (x *Order) GetOrderValidDate() string {
	if x != nil {
		return x.OrderValidDate
	}
	return ""
}

func (x *Order) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *Order) GetAckTime() string {
	if x != nil {
		return x.AckTime
	}
	return ""
}

func (x *Order) GetSpecialFlag() string {
	if x != nil {
		return x.SpecialFlag
	}
	return ""
}

func (x *Order) GetOrderFlow() string {
	if x != nil {
		return x.OrderFlow
	}
	return ""
}

func (x *Order) GetSpreadOrderIndicator() string {
	if x != nil {
		return x.SpreadOrderIndicator
	}
	return ""
}

func (x *Order) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Order) GetUserFlag() string {
	if x != nil {
		return x.UserFlag
	}
	return ""
}

func (x *Order) GetExchangeRemarks() string {
	if x != nil {
		return x.ExchangeRemarks
	}
	return ""
}

func (x *Order) GetIndexCode() string {
	if x != nil {
		return x.IndexCode
	}
	return ""
}

func (x *Order) GetSltpTrailFlag() string {
	if x != nil {
		return x.SltpTrailFlag
	}
	return ""
}

func (x *Order) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *Order) GetVendorNumber() string {
	if x != nil {
		return x.VendorNumber
	}
	return ""
}

func (x *Order) GetOneClickFlag() string {
	if x != nil {
		return x.OneClickFlag
	}
	return ""
}

func (x *Order) GetOneClickPortfolioId() string {
	if x != nil {
		return x.OneClickPortfolioId
	}
	return ""
}

func (x *Order) GetAlgoId() string {
	if x != nil {
		return x.AlgoId
	}
	return ""
}

func (x *Order) GetAlgoOrderRemarks() string {
	if x != nil {
		return x.AlgoOrderRemarks
	}
	return ""
}

func (x *Order) GetSourceFlag() string {
	if x != nil {
		return x.SourceFlag
	}
	return ""
}

func (x *Order) GetPopupFlag() string {
	if x != nil {
		return x.PopupFlag
	}
	return ""
}

func (x *Order) GetExpiryDate2() string {
	if x != nil {
		return x.ExpiryDate2
	}
	return ""
}

func (x *Order) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Order) GetCallSource() string {
	if x != nil {
		return x.CallSource
	}
	return ""
}

func (x *Order) GetFreshOrderRef() string {
	if x != nil {
		return x.FreshOrderRef
	}
	return ""
}

func (x *Order) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Order) GetSystemMessage() string {
	if x != nil {
		return x.SystemMessage
	}
	return ""
}

func (x *Order) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *Order) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *Order) GetDeliveryEosFlag() string {
	if x != nil {
		return x.DeliveryEosFlag
	}
	return ""
}

func (x *Order) GetOrderReference() string {
	if x != nil {
		return x.OrderReference
	}
	return ""
}

func (x *Order) GetCoverOrderRef() string {
	if x != nil {
		return x.CoverOrderRef
	}
	return ""
}

type OrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderResponse) Reset() {
	*x = OrderResponse{}
	mi := &file_order_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponse) ProtoMessage() {}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponse.ProtoReflect.Descriptor instead.
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *OrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0xee, 0x0f, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x62, 0x61, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x62, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x73, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x74, 0x63, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x74, 0x63, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6b, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6e, 0x6b, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6c, 0x6d, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6c, 0x6d, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x6c, 0x74, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x74, 0x70, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x16,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x6e,
	0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x67, 0x6f, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c,
	0x67, 0x6f, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x70,
	0x75, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x70, 0x75, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x32, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6f, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6f, 0x73,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x43, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x49, 0x0a, 0x16, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x0c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a,
	0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x61, 0x6d, 0x72, 0x61, 0x69, 0x30, 0x31, 0x32, 0x33, 0x2f,
	0x46, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData []byte
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_order_proto_rawDesc), len(file_order_proto_rawDesc)))
	})
	return file_order_proto_rawDescData
}

var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_order_proto_goTypes = []any{
	(*Order)(nil),         // 0: order.Order
	(*OrderResponse)(nil), // 1: order.OrderResponse
}
var file_order_proto_depIdxs = []int32{
	0, // 0: order.random_order_generator.SendOrder:input_type -> order.Order
	1, // 1: order.random_order_generator.SendOrder:output_type -> order.OrderResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_order_proto_rawDesc), len(file_order_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
